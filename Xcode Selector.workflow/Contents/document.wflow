<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AMApplicationBuild</key>
	<string>428</string>
	<key>AMApplicationVersion</key>
	<string>2.7</string>
	<key>AMDocumentVersion</key>
	<string>2</string>
	<key>actions</key>
	<array>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>1.0.2</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run AppleScript.action</string>
				<key>ActionName</key>
				<string>Run AppleScript</string>
				<key>ActionParameters</key>
				<dict>
					<key>source</key>
					<string>############################################################################################################################################ Created By: James Headrick## Date: 29 Sept 2016## Modified: 5 Oct 2016## Version: 1.0#### Description: This utility is will recursively search the /Applications directory for##  files with "Xcode" in the name. It will:##	1. Prompt the user to select a version##	2. Quit running versions of Xcode##	3. Run xcode-select to select the proper toolchain##	4. Open the selected version of Xcode############################################################################################################################################## Global Variables ðŸ˜³global xcodeCountglobal totalStepCountglobal currentStepCountglobal foundPathson run	initializeVariables()	set progress total steps to totalStepCount	updateStepCount()	set progress additional description to "Beginning Xcode Selection"	prepareFilePathsForDisplay(getXcodeVersionsInDefaultDirectory())	set progress description to "Select a version of Xcode"	set currentXcode to getCurrentXcodeSelectVersion()	set xcodePrompt to "Select a version of Xcode"	if (count of characters in currentXcode) is greater than 0 then		set xcodePrompt to xcodePrompt &amp; return &amp; "Current Selection: " &amp; currentXcode &amp; return	end if	chooseAVersion(foundPaths, xcodePrompt)end runon initializeVariables()	set progress description to "Preparing..."	set xcodeCount to 0	set totalStepCount to 6	set currentStepCount to 0	set foundPaths to {}end initializeVariableson updateStepCount()	set progress completed steps to currentStepCount	set currentStepCount to currentStepCount + 1end updateStepCounton ensureMinimumQuantityOfChoices(xcodePathList)	## This is to ensure the initial Xcode choice isn't too small and truncated	if (count of xcodePathList) is less than 5 then		log "less than 5"		repeat (5 - (count of xcodePathList)) times			set xcodePathList to xcodePathList &amp; ""		end repeat	end if	return xcodePathListend ensureMinimumQuantityOfChoiceson prepareFilePathsForDisplay(itemsFound)	set searchAdditionalDirsString to "Search a Different Directory..."	set cleanList to {}		# remove old filler choices from list	repeat with listItem in foundPaths		if listItem as string is not equal to "" and listItem as string is not equal to searchAdditionalDirsString as string then			set cleanList's end to listItem		end if	end repeat		# reset foundPaths	set foundPaths to cleanList		#display alert contents of foundPaths		# append newly found Xcodes	repeat with itemFound in itemsFound		tell application "System Events"			set foundPath to (POSIX path of itemFound as text)		end tell				set addToList to true				repeat with aPath in foundPaths			if aPath as text is equal to foundPath as text then				set addToList to false			end if		end repeat				if addToList is true then			set end of foundPaths to foundPath		end if	end repeat	set end of foundPaths to searchAdditionalDirsString	set foundPaths to ensureMinimumQuantityOfChoices(foundPaths)end prepareFilePathsForDisplayon chooseAVersion(foundXcodePaths, userPrompt)	tell application "System Events"		activate		set chosenVersion to (choose from list foundPaths with title "Xcode Selector" with prompt userPrompt default items "None" OK button name "Continue" cancel button name "Cancel")	end tell		if chosenVersion is not false then		if (count of characters of (first item of chosenVersion)) is 0 then			chooseAVersion(foundXcodePaths, userPrompt)		else if first item in chosenVersion is "Search a Different Directory..." then			activate			set selectedDirectory to ""			try				set selectedDirectory to choose folder			on error				log "crap"			end try			if (count of characters of (selectedDirectory as text)) is greater than 0 then				set itemsFound to recursiveFolderSearch(selectedDirectory)				prepareFilePathsForDisplay(itemsFound)			end if			chooseAVersion(foundPaths, userPrompt)		else			quitXcode()			selectXcodeVersion(first item in chosenVersion)		end if	end ifend chooseAVersion####################################################################### Manage Xcode Interaction####################################################################on getCurrentXcodeSelectVersion()	updateStepCount()	try		set currentVersion to (do shell script "xcode-select -p")		log currentVersion		set currentXcode to text beginning thru ((offset of ".app/" in currentVersion) + 3) of currentVersion		log currentXcode		return currentXcode	on error errMsg number errNum		log errNum &amp; ": " &amp; errMsg		return ""	end tryend getCurrentXcodeSelectVersionon selectXcodeVersion(selectedVersion)	activate	set pathToXcode to quoted form of POSIX path of selectedVersion	try		updateStepCount()		set progress description to "Switching Xcode Toolchain"		do shell script "sudo xcode-select -switch " &amp; pathToXcode with administrator privileges		display notification with title "Successfully set Xcode Version" subtitle selectedVersion sound name "Submarine"		startSelectedXcodeVersion(pathToXcode)	on error error_message number error_number		set progress description to "Error: " &amp; error_message as text		display alert "Failed to set the current version of Xcode" message "Error " &amp; (error_number as text) &amp; ": " &amp; (error_message as text) as critical giving up after 10	end tryend selectXcodeVersionon quitXcode()	# Quit all apps associated with a specific version of Xcode	updateStepCount()	set progress description to "Attempting to quit running versions of Xcode"	set progress description to "Quitting Xcode"	try		do shell script "killall Xcode"	end try	set progress description to "Quitting iOS Simulator"	try		do shell script "killall Simulator"	end try	set progress description to "Quitting watchOS Simulator"	try		do shell script "killall 'Simulator (Watch)'"	end try	set progress description to "Quitting Xcode Server Builder"	try		do shell script "killall 'Xcode Server Builder'"	end try	set progress description to "Quitting DesktopReplayer"	try		do shell script "killall DesktopReplayer"	end tryend quitXcodeon startSelectedXcodeVersion(selectedVersionPath)	updateStepCount()	set progress description to "Opening Xcode"	do shell script "open " &amp; selectedVersionPathend startSelectedXcodeVersion########################################################################################################################################### Search recursively for Xcode in applications folder####################################################################on getXcodeVersionsInDefaultDirectory()	updateStepCount()	set progress description to "Looking for Xcode..."	set applicationsDirectory to path to applications folder as alias	# Search  applications directory and subdirectories for Xcode	set xcodeList to recursiveFolderSearch(applicationsDirectory)	return xcodeListend getXcodeVersionsInDefaultDirectoryon recursiveFolderSearch(currentDirectory)	set progress description to "Searching for Xcode in " &amp; currentDirectory as text	set xcodeList to searchFolderForXcode(currentDirectory)	tell application "System Events"		set folderNames to name of every folder in currentDirectory	end tell	repeat with currentFolder in folderNames		set newFolderPath to (((currentDirectory as text) &amp; currentFolder &amp; ":") as alias)		set progress description to "Searching for Xcode in " &amp; newFolderPath		set xcodeList to xcodeList &amp; recursiveFolderSearch(newFolderPath)	end repeat	return xcodeListend recursiveFolderSearchon searchFolderForXcode(chosenFolder)	tell application "System Events"		set xcodes to (every file of chosenFolder) whose (name contains "Xcode" and name ends with ".app")		set xcodeCount to xcodeCount + (count of xcodes)		set foundString to "Found " &amp; xcodeCount &amp; " versions of Xcode"	end tell	set progress additional description to foundString as string	tell application "System Events"		return xcodes	end tellend searchFolderForXcode####################################################################</string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.Automator.RunScript</string>
				<key>CFBundleVersion</key>
				<string>1.0.2</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunScriptAction</string>
				<key>InputUUID</key>
				<string>912D6E92-2A17-43A3-9EE0-39DE6D1A04F7</string>
				<key>Keywords</key>
				<array>
					<string>Run</string>
				</array>
				<key>OutputUUID</key>
				<string>F1B8462E-0373-42B7-B5F7-195B0B68D133</string>
				<key>UUID</key>
				<string>DF7F53FE-67DE-4F0A-A23B-2057624FCDB6</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<string>on run {input, parameters}
	
	(* Your script goes here *)
	
	return input
end run</string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
				</dict>
				<key>isViewVisible</key>
				<true/>
				<key>location</key>
				<string>673.500000:695.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run AppleScript.action/Contents/Resources/Base.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<true/>
		</dict>
	</array>
	<key>connectors</key>
	<dict/>
	<key>workflowMetaData</key>
	<dict>
		<key>serviceInputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>serviceOutputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>serviceProcessesInput</key>
		<integer>0</integer>
		<key>workflowTypeIdentifier</key>
		<string>com.apple.Automator.servicesMenu</string>
	</dict>
</dict>
</plist>
